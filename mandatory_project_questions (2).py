# -*- coding: utf-8 -*-
"""Mandatory Project Questions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1952TyATfc7wUJSJU5X37xaercGvtzl2n
"""

#Q1:=> You are working in a bank, and you have been given two lists of the employees who worked in 2021. Employees’ names in list 1 are Ramesh,
 #Suresh, Mahesh, Ali, Jacob, and Saritha. List 2 contains the names of Ali, Mukesh, Mahesh, Jacob, Sai, and Sarita.
 #"Please write a program that helps to identify people who are common in both lists. Please do not use any in-built function".
# here the code compares two lists [list1 and list2], and prints the common elements
list1= ["Suresh", "Mahesh", "Ali", "Jacob", "Saritha"]
list2= ["Ali", "Mukesh", "Mahesh", "Jacob", "Sai", "Sarita"]
for i in list1: #FOR loop iterate for each element(i) in list1
  if i in list2: # the if statement checks whether the current element (i) is present in list2
    print(i)

#Q2: While entering data, someone entered a few names as a common string “Ramesh Suresh Mohit”.
#Please write a program which separates all the names and converts them into a list.
#Once converted into a list, please write a program that adds their age.
#Ramesh:  25
#Suresh: 22
#Mohit: 26

str1= "Ramesh Suresh Mohit" #common string
list1=str1.split() #for seperating the names into a list
print(list1)
set1={"Ramesh": 25, "Suresh": 22, "Mohit": 26} #dictionary with keys(names) and value (ages)
age=0
for i in set1: #for loop iterate through each keys
  age = age + set1[i]
print(f"Sum of there age is {age}.")

#Q3: You are working in a medical store. A patient came to your medical store and asked to buy 2 strips of paracetamol,
#3 strips of azithromycin, and 5 strips of Vitamin C. One strip of paracetamol costs Rs 35, one strip of azithromycin
#costs Rs 49,#and one strip of vitamin c costs Rs. 33. Patient gave you Rs 2000. Please tell us what is the total cost
#of each medicine, the total cost of all medicine, and how much money you refunded to the patient.

paraC= 35*2 #cost of 2 paracetamol tab.
azethroM= 49*3  #cost of 3 azithromycin tab.
VitC= 33*5  #cost of 5 Vitamin C tab.
total_cost = (paraC+azethroM+VitC)
refund= (2000-total_cost)
print(f"Total cost of Paracetamol is: {paraC}")
print(f"Total cost of Azithromycin is: {azethroM}")
print(f"Total cost of Vitamin C is: {VitC}")
print(f"The total cost of all medicine is: {total_cost}")
print(f"Money refunded: {refund}")

#Q4: Accept a sentence as input and find the number of vowels in it. Assume that the sentence has no punctuation marks.
#For example, I am learning python contains 6 vowels. This function should be applicable for all other different sentences.
def get_vowels(str1): #defines a function with str1 as a parameter.
  count=0
  vowel_list=["a","e","i","o","u","A","E","I","O","U"]
  for i in str1: #iterate each character in str1
    if i in vowel_list:
      count = count+1
  print(f"Number of Vowels are: {count}")
str1=input("Enter your sentence here: ") #take input from user
get_vowels(str1) #calls the function

#Q5: You have been appointed by the election commission to create a website. Your first task is to work on a program which
#tells candidates if they are eligible for voting or not. If they are eligible, your output should be ‘Congrats! You are eligible’;
#otherwise, it should tell that you have to return after X number of years. The eligibility criteria for voting is 18 years.

age= int(input("Enter your age: ")) #takes input (age) from user
if age >= 18:
  print("‘Congrats! You are eligible’")
else:
  print(f"Return after {18-age} years")

#Q6: Given a list of integers, find the cumulative sum of the elements of the list and store them in another list.
A_list = [1, 2, 3, 4, 5] #list with values
sum1=0
cumulative_list = []  #empty list which store the cumulative sum
for i in A_list: #for loop iterate each element "i" in A_list
  sum1 = sum1 + i  #adds current elemnt "i" to the sum stored in sum1
  cumulative_list.append(sum1) #append the values in sum1 to cumulative_list
print(cumulative_list)

#Q7: WAP to encode a message entered by user as per below conditions:
#for every word in the sentence,
#1. If the word starts with a vowel, encode it as the first and last letter of the word.
#2. If the word starts with a consonant, remove all vowels from it.
#Ensure the case insensitive comparisons/checks are performed.
#Please enter your text:The quick brown fox used to sleep inside this box
#Encoded Msg: Th qck brwn fx ud t slp ie ths bx
def message(sentence): #def function that takes words "sentence" as parameter
  vowels_list = ["a","e","i","o","u","A","E","I","O","U"]
  encoded_sentence = "" #empty list to store encoded sentence
  encoded_msg = "" #empty list to store encoded msg
  for word in sentence: #iterate for each word in sentence
      first_letter = word[0] #gives position of first letter if a vowel
      if first_letter in vowels_list:
          encoded_msg = word[0] + word[len(word) - 1]
      else:
          consonant = ""
          for each_char in word :
             if each_char not in vowels_list :
                  consonant += each_char
          encoded_msg = consonant
      encoded_sentence += encoded_msg + " "
  return encoded_sentence
sentence = input("Please enter your text: ").split()
encoded = message(sentence)
print(f"Encoded Msg: {encoded}")

#Q8 explaination
def message(sentence):: Defines a function named message that takes a list of words (sentence) as its parameter.

vowels_list = ["a","e","i","o","u","A","E","I","O","U"]: Creates a list containing vowels (both lowercase and uppercase).

encoded_sentence = "": Initializes an empty string to store the encoded sentence.

encoded_msg = "": Initializes an empty string to store the encoded message for each word.

for word in sentence:: Iterates through each word in the input sentence.

first_letter = word[0]: Retrieves the first letter of the current word.

if first_letter in vowels_list:: Checks if the first letter is a vowel.

If the first letter is a vowel, encoded_msg is set to the first and last letters of the word: word[0] + word[len(word) - 1].

If the first letter is not a vowel (an else clause), it iterates through each character in the word to find consonants and concatenates them to the consonant variable.

encoded_msg = consonant: Updates encoded_msg with the consonant.

encoded_sentence += encoded_msg + " ": Appends the encoded message for the current word to encoded_sentence, followed by a space.

return encoded_sentence: Returns the final encoded sentence.

sentence = input("Please enter your text: ").split(): Takes user input and splits it into a list of words using the split() method.

encoded = message(sentence): Calls the message function with the user-provided sentence and stores the result in the encoded variable.

print(f"Encoded Msg: {encoded}"): Prints the final encoded message.

So, if you enter a sentence, the code will encode it based on the described rules and print the resulting encoded message.

#Q8:Write a program to implement run length encoding of a string
#RLE:Consecutive repetition of a character has to be replaced with the count of occurrences and the character.
#Enter your string :aabbbccdddae
#Encoded: 2a3b2c3d1a1e
def RLE():
  str1=input("Enter your string: ")
  curr_char = str1[0]
  count = 0
  print("Encoded: ", end="")
  for i in range(0,len(str1)):
    new_char = str1[i]
    if curr_char == new_char:
     count = count+1
    else:
      print(count,curr_char, sep="", end="")
      curr_char=new_char
      count=1
  else:
    print(count,curr_char, sep="", end="")
RLE()